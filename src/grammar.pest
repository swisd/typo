//
// grammar
// Author: n12
//

// src/grammar.pest

IDENT = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

program = { SOI ~ (statement ~ (";" | NEWLINE)*)* ~ EOI }

statement = _{
      prog_name
    | type_def
    | assoc
    | func_args
    | function
    | class_rtrn
    | class_args
    | class
    | return_stmt
    | if_stmt
    | if_else_stmt
    | loop_for
    | loop_while
    | assignment
    | return_stmt
    | expr_stmt
}

word = {
      "#" //declaration
    | "!" //inverse
    | "?" //logical result
}


prog_name = { "program" ~ IDENT }
type_def = { "typ" ~ IDENT ~ ":" ~ IDENT }
assoc = { "define:" ~ IDENT ~ "as" ~ IDENT }
func_args = { "args" ~ IDENT ~ "{" ~ assoc_list? ~ "}" }
assoc_list = { assoc ~ (sep ~ assoc)* }
sep = _{ ";" | NEWLINE }
function = { "fn" ~ IDENT ~ "(" ~ (IDENT ~ ("," ~ IDENT)*)? ~ ")" ~ "->" ~ IDENT ~ "{" ~ (statement ~ (";" | NEWLINE)*)* ~ "}" }
class_rtrn = { "repr" ~ IDENT ~ "{" ~ return_stmt ~ "}" }
class_args = { "struct" ~ IDENT ~ "{" ~ (assoc ~ ("," ~ assoc)*)? ~ "}" }
class = { "cls" ~ IDENT ~ "{" ~ (statement ~ (";" | NEWLINE)*)* ~ "}" }
return_stmt = { "return" ~ ":" ~ expression }
if_stmt = { "if" ~ "(" ~ expression ~ ")" ~ "{" ~ (statement ~ (";" | NEWLINE)*)* ~ "}" }
if_else_stmt = { "if" ~ "(" ~ expression ~ ")" ~ "{" ~ (statement ~ (";" | NEWLINE)*)* ~ "}" ~ "else" ~ "{" ~ (statement ~ (";" | NEWLINE)*)* ~ "}" }
loop_for = { "for" ~ "(" ~ IDENT ~ "," ~ expression ~ "," ~ expression ~ "," ~ expression ~ ")" ~ "{" ~ (statement ~ (";" | NEWLINE)*)* ~ "}" }
loop_while = { "while" ~ "(" ~ expression ~ ")" ~ "{" ~ (statement ~ (";" | NEWLINE)*)* ~ "}" }
assignment = {
      "var" ~ IDENT ~ ":" ~ IDENT ~ ("&mut")? ~ "=" ~ expression
    | "const" ~ IDENT ~ ":" ~ IDENT ~ "=" ~ expression
    | "static ref" ~ IDENT ~ ":" ~ IDENT ~ "=" ~ expression
}


expr_stmt = { expression }
args = { (IDENT ~ ("," ~ NEWLINE? ~ IDENT)*)? }
body = { (statement)* }

rti = { ASCII_HEX_DIGIT }

name = @{ (ASCII_ALPHANUMERIC | "_")+ }

type_ = _{ name }  // Or a more detailed type parser
semi = _{ ";" }
resolution = { name }
var = { IDENT }
start = { number }
stop = { number }
step = { number }
return_type = { "return:" ~ type_ }

comparator = _{ "==" | "!=" | "<" | ">" | "<=" | ">=" }
operator = _{ "+" | "-" | "/" | "*" | "**"}

expression = _{ infix_expr }
infix_expr = { term ~ (operator ~ term)* }

term = _{ IDENT | literal | "(" ~ expression ~ ")" }
function_call = { IDENT ~ "(" ~ (expression ~ ("," ~ expression)*)? ~ ")" }

literal = _{ number | string | boolean }
number = @{ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }
string = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
boolean = { "true" | "false" }

WHITESPACE = _{ " " | "\t" | NEWLINE }
NEWLINE = _{ "\r\n" | "\n" }
COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* }
