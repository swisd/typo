//
// grammar
// Author: n12
//

// src/grammar.pest

program = { SOI ~ statement* ~ EOI }

statement = _{
      prog_name
    | type_def
    | assoc
    | func_args
    | function
    | class_rtrn
    | class_args
    | class
    | if_stmt
    | if_else_stmt
    | loop_for
    | loop_while
    | assignment
    | (!("}" | ")") ~ ANY)+ ~ semi
    | rti
}

word = {
      "#" //declaration
    | "!" //inverse
    | "?" //logical result
}

prog_name = { "program" ~ name ~ semi }
type_def = { "typ" ~ name ~ resolution ~ semi }
assoc = { "define:" ~ IDENT ~ "as" ~ type_ ~ semi }
func_args = { "args" ~ name ~ "{" ~ args ~ "}" }
function = { "fn" ~ "(" ~ args ~ ")" ~ "->" ~ return_type ~ "{" ~ body ~ "}" }
class_rtrn = { "repr" ~ name ~ "{" ~ body ~ "}" }
class_args = { "struct" ~ name ~ "{" ~ args ~ "}" }
class = { "cls" ~ name ~ "{" ~ body ~ "}" }

if_stmt = { "if" ~ "(" ~ IDENT ~ operator ~ IDENT ~ ")" ~ "{" ~ body ~ "}" }
if_else_stmt = {
    "if" ~ "(" ~ IDENT ~ operator ~ IDENT ~ ")" ~ "{" ~ body ~ "}" ~
    ("else" ~ "{" ~ body ~ "}" | ("else" ~ if_stmt))?
}

loop_for = { "for" ~ "(" ~ var ~ start ~ stop ~ step ~ ")" ~ "{" ~ body ~ "}" }
loop_while = { "while" ~ "(" ~ IDENT ~ operator ~ IDENT ~ ")" ~ "{" ~ body ~ "}" }

assignment = {
      "var" ~ var ~ ":" ~ type_ ~ "=" ~ statement ~ semi
    | "var" ~ var ~ ":" ~ type_ ~ "&mut" ~ "=" ~ statement ~ semi
    | "const" ~ var ~ ":" ~ type_ ~ "=" ~ statement ~ semi
    | "static ref" ~ var ~ ":" ~ type_ ~ "=" ~ statement ~ semi
}

args = { (IDENT ~ ("," ~ NEWLINE? ~ IDENT)*)? }
body = { (statement)* }

semi = _{ ";" }

rti = { ASCII_HEX_DIGIT }

name = @{ ASCII_ALPHANUMERIC+ }
IDENT = @{ ASCII_ALPHANUMERIC+ }
type_ = _{ name }
resolution = { name }
var = { IDENT }
start = { number }
stop = { number }
step = { number }
return_type = { type_ }

operator = _{ "==" | "!=" | "<" | ">" | "<=" | ">=" }

number = @{ ASCII_DIGIT+ }

WHITESPACE = _{ " " | "\t" | NEWLINE }
NEWLINE = _{ "\r\n" | "\n" | "\r" }